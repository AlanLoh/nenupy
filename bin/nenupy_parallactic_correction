#! /usr/bin/python3
# -*- coding: utf-8 -*-


"""
    Computes the parallactic angle corrections matrices as seen
    during a NenuFAR tracking observation.
    This is a wrapper around the DreamBeam module written by
    Tobia Carozzi (https://github.com/2baOrNot2ba/dreamBeam).
    The NenuFAR antenna element radiation pattern has been provided
    by the NenuFAR team and integrated by Tobia in DreamBeam.

    Using this software requires that DreamBeam is already installed.
    The latter requires AntPat (https://github.com/2baOrNot2ba/AntPat)
    and python-casacore (https://github.com/casacore/python-casacore).
"""


__author__ = "Alan Loh"
__copyright__ = "Copyright 2023, nenupy"
__credits__ = ["Alan Loh"]
__maintainer__ = "Alan"
__email__ = "alan.loh@obspm.fr"
__status__ = "Production"


from nenupy.astro.jones_mueller import JonesMatrix, MuellerMatrix
from astropy.coordinates import SkyCoord
from astropy.time import Time, TimeDelta
import astropy.units as u
import h5py
from typing import Union, Tuple
import argparse
import logging
log = logging.getLogger("nenupy")
log.setLevel(logging.INFO)

try:
    from dreambeam.rime.scenarios import on_pointing_axis_tracking
except ImportError:
    log.error(
        "DreamBeam is not installed. "
        "See installation instructions https://github.com/2baOrNot2ba/dreamBeam"
    )
    raise


# ============================================================= #
# ------------------ compute_jones_matrices ------------------- #
def compute_jones_matrices(
        start_time: Time,
        time_step: TimeDelta,
        duration: TimeDelta,
        skycoord: SkyCoord,
        parallactic: bool = True
    ) -> Tuple[Time, u.Quantity, JonesMatrix]:
    """
    """
    log.info("Computing Jones matrices using DreamBeam...")
    times, frequencies, Jn, _ = on_pointing_axis_tracking(
        telescopename="NenuFAR",
        stnid="NenuFAR",
        band="LBA",
        antmodel="Hamaker-NEC4_Charrier_v1r1",
        obstimebeg=start_time.datetime,
        obsdur=duration.datetime,
        obstimestp=time_step.datetime,
        pointingdir=(skycoord.ra.rad, skycoord.dec.rad, "J2000"),
        do_parallactic_rot=parallactic
    )
    # import numpy as np
    # times = start_time + TimeDelta(3600, format="sec")*np.arange(12)
    # frequencies = np.array([30e6, 50e6])*u.MHz
    # Jn = np.tile(np.array([[1, 1], [0, 1]]), (times.size, frequencies.size, 1, 1))
    return times, frequencies, JonesMatrix(Jn)
# ============================================================= #


# ============================================================= #
# -------------------- convert_to_mueller --------------------- #
def convert_to_mueller(jones_matrices: JonesMatrix) -> MuellerMatrix:
    """ """
    log.info(f"Converting {jones_matrices.shape} Jones matrices to Mueller matrices...")
    return jones_matrices.to_mueller()
# ============================================================= #


# ============================================================= #
# --------------------- matrices_to_hdf5 ---------------------- #
def matrices_to_hdf5(
        times: Time, frequencies: u.Quantity,
        matrices: Union[JonesMatrix, MuellerMatrix],
        file_name: str
    ) -> None:
    """ """
    if not file_name.endswith(".hdf5"):
        raise ValueError("The name of the HDF5 file must end with '.hdf5'!")

    if matrices.shape[:-2] != times.shape + frequencies.shape:
        raise IndexError(
            "Inconsistent shapes detected. "
            f"times.shape={times.shape}, "
            f"frequencies.shape={frequencies.shape}, "
            f"matrices.shape={matrices.shape}, "
        )
  
    log.info(f"Writing the results in {file_name}...")
    
    with h5py.File(file_name, "w") as f:
        f["data"] = matrices
        f["data"].dims[0].label = "time"
        f["data"].dims[1].label = "frequency"
        f["time"] = times.jd
        f["time"].make_scale("Time (JD)")
        f["frequency"] = frequencies.to(u.MHz).value
        f["frequency"].make_scale("Frequency (MHz)")
        f["data"].dims[0].attach_scale(f["time"])
        f["data"].dims[1].attach_scale(f["frequency"])
    
    log.info(f"{file_name} written!")
# ============================================================= #
# ============================================================= #


# ============================================================= #
# ---------------------- argument_parser ---------------------- #
def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-t", "--time", type=str, required=True,
        help="Start time (UTC, ISOT format)."
    )
    parser.add_argument(
        "-dt", "--tstep", type=int, required=True,
        help="Time step (in seconds)."
    )
    parser.add_argument(
        "-dd", "--duration", type=int, required=True,
        help="Observation duration (in seconds)."
    )
    parser.add_argument(
        "-r", "--ra", type=float, required=True,
        help="Target Right Ascension (in degrees)."
    )
    parser.add_argument(
        "-d", "--dec", type=float, required=True,
        help="Target Declination (in degrees)."
    )
    parser.add_argument(
        "-f", "--file_name", type=str, required=True,
        help="File name where the results will be stored (FITS extension)."
    )
    matrix_parser = parser.add_mutually_exclusive_group(required=False)
    matrix_parser.add_argument(
        "-m", "--mueller",
        dest="output_mueller", action="store_true",
        help="Output Mueller matrices."
    )
    matrix_parser.add_argument(
        "-j", "--jones",
        dest="output_mueller", action="store_false",
        help="Output Jones matrices."
    )
    parallactic_parser = parser.add_mutually_exclusive_group(required=False)
    parallactic_parser.add_argument(
        "-p", "--parallactic_rotation",
        dest="parallactic_rotation", action="store_true",
        help="Account for parallactic angle rotation."
    )
    parallactic_parser.add_argument(
        "-np", "--no_parallactic_rotation",
        dest="parallactic_rotation", action="store_false",
        help="Do not account for parallactic angle rotation."
    )
    parser.set_defaults(parallactic_rotation=True)
    args = parser.parse_args()
    return args
# ============================================================= #
# ============================================================= #

# ============================================================= #
# --------------------------- main ---------------------------- #
if __name__ == "__main__":

    args = parse_arguments()

    # Compute the Jones matrices using DreamBeam
    times, frequencies, output_matrices = compute_jones_matrices(
        start_time=Time(args.time),
        time_step=TimeDelta(args.tstep),
        duration=TimeDelta(args.duration),
        skycoord=SkyCoord(args.ra, args.dec, unit="deg", frame="icrs"),
        parallactic=args.parallactic_rotation
    )

    # Convert these matrices into Mueller matrices
    if args.output_mueller:
        output_matrices = convert_to_mueller(output_matrices)
    
    # Store the results in a FITS file
    matrices_to_hdf5(
        times=times,
        frequencies=frequencies,
        matrices=output_matrices,
        file_name=args.file_name
    )
# ============================================================= #
# ============================================================= #
