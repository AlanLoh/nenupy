#! /usr/bin/python3
# -*- coding: utf-8 -*-


"""
    ******************
    HEALPix Beam Utils
    ******************
"""


__author__ = 'Alan Loh'
__copyright__ = 'Copyright 2020, nenupy'
__credits__ = ['Alan Loh']
__maintainer__ = 'Alan'
__email__ = 'alan.loh@obspm.fr'
__status__ = 'Production'
__all__ = [
    'ma_antpos',
    'ma_info',
    'ma_pos'
]


import numpy as np


# ============================================================= #
# ------------------------- ma_antpos ------------------------- #
# ============================================================= #
nenufar_antpos = np.array(
    [
        -5.50000000e+00, -9.52627850e+00,  0.00000000e+00,
         0.00000000e+00, -9.52627850e+00,  0.00000000e+00,
         5.50000000e+00, -9.52627850e+00,  0.00000000e+00,
        -8.25000000e+00, -4.76313877e+00,  0.00000000e+00,
        -2.75000000e+00, -4.76313877e+00,  0.00000000e+00,
         2.75000000e+00, -4.76313877e+00,  0.00000000e+00,
         8.25000000e+00, -4.76313877e+00,  0.00000000e+00,
        -1.10000000e+01,  9.53674316e-07,  0.00000000e+00,
        -5.50000000e+00,  9.53674316e-07,  0.00000000e+00,
         0.00000000e+00,  9.53674316e-07,  0.00000000e+00,
         5.50000000e+00,  9.53674316e-07,  0.00000000e+00,
         1.10000000e+01,  9.53674316e-07,  0.00000000e+00,
        -8.25000000e+00,  4.76314068e+00,  0.00000000e+00,
        -2.75000000e+00,  4.76314068e+00,  0.00000000e+00,
         2.75000000e+00,  4.76314068e+00,  0.00000000e+00,
         8.25000000e+00,  4.76314068e+00,  0.00000000e+00,
        -5.50000000e+00,  9.52628040e+00,  0.00000000e+00,
         0.00000000e+00,  9.52628040e+00,  0.00000000e+00,
         5.50000000e+00,  9.52628040e+00,  0.00000000e+00
    ]
).reshape(19, 3)

def ma_antpos(rot):
    """ MiniArray rotation in degrees
    """
    rot = np.radians(rot - 90)
    rotation = np.array(
        [
            [ np.cos(rot), np.sin(rot), 0],
            [-np.sin(rot), np.cos(rot), 0],
            [ 0,           0,           1]
        ]
    )
    return np.dot(nenufar_antpos, rotation)
# ============================================================= #



# ============================================================= #
# -------------------------- ma_info -------------------------- #
# ============================================================= #
ma_info = np.array(
    [
        (0 , 0  , np.array([6.39113316e+05, 6.69766347e+06, 1.81735000e+02]), 440.5 , 29.5),
        (1 , 30 , np.array([6.39094578e+05, 6.69764471e+06, 1.81750000e+02]), 364   , 30  ),
        (2 , 300, np.array([6.39069472e+05, 6.69763443e+06, 1.81761000e+02]), 150   , 31  ),
        (3 , 200, np.array([6.39038120e+05, 6.69761975e+06, 1.81757000e+02]), 145.5 , 31  ),
        (4 , 20 , np.array([6.39020122e+05, 6.69759892e+06, 1.81762000e+02]), 464.5 , 28.5),
        (5 , 180, np.array([6.39062298e+05, 6.69765911e+06, 1.81671000e+02]), 384.5 , 30  ),
        (6 , 180, np.array([6.39039218e+05, 6.69764638e+06, 1.81718000e+02]), 276.5 , 31  ),
        (7 , 230, np.array([6.38985155e+05, 6.69762795e+06, 1.81620000e+02]), 471   , 28.5),
        (8 , 150, np.array([6.39002711e+05, 6.69764788e+06, 1.81677000e+02]), 411.5 , 29.5),
        (9 , 240, np.array([6.39006567e+05, 6.69767471e+06, 1.81737000e+02]), 428.5 , 29.5),
        (10, 290, np.array([6.39033717e+05, 6.69769736e+06, 1.81762000e+02]), 496   , 28.5),
        (11, 310, np.array([6.39040955e+05, 6.69772821e+06, 1.81813000e+02]), 663   , 27.5),
        (12, 250, np.array([6.39061482e+05, 6.69770986e+06, 1.81727000e+02]), 659.5 , 25  ),
        (13, 40 , np.array([6.39081586e+05, 6.69774800e+06, 1.81997000e+02]), 958   , 24.5),
        (14, 330, np.array([6.39099636e+05, 6.69778020e+06, 1.82152000e+02]), 1032  , 24.5),
        (15, 280, np.array([6.39098493e+05, 6.69772636e+06, 1.81912000e+02]), 793   , 26.5),
        (16, 60 , np.array([6.39128375e+05, 6.69774506e+06, 1.82005000e+02]), 1054.5, 24  ),
        (17, 110, np.array([6.39153064e+05, 6.69776096e+06, 1.82062000e+02]), 1233  , 23  ),
        (18, 10 , np.array([6.39201475e+05, 6.69776774e+06, 1.82083000e+02]), 1355  , 22  ),
        (19, 210, np.array([6.39146673e+05, 6.69779044e+06, 1.82199000e+02]), 1249.5, 22.5),
        (20, 320, np.array([6.39191912e+05, 6.69780784e+06, 1.82057000e+02]), 1352.5, 21.5),
        (21, 260, np.array([6.39158373e+05, 6.69784497e+06, 1.82201000e+02]), 1461  , 21.5),
        (22, 250, np.array([6.39007359e+05, 6.69773473e+06, 1.81967000e+02]), 662   , 27.5),
        (23, 170, np.array([6.38994637e+05, 6.69778006e+06, 1.82016000e+02]), 969.5 , 25  ),
        (24, 180, np.array([6.38974900e+05, 6.69779771e+06, 1.82057000e+02]), 1082.5, 24.5),
        (25, 50 , np.array([6.39039664e+05, 6.69779603e+06, 1.82092000e+02]), 1052  , 23.5),
        (26, 300, np.array([6.39051439e+05, 6.69782833e+06, 1.82133000e+02]), 1112  , 23.5),
        (27, 210, np.array([6.39037314e+05, 6.69786239e+06, 1.82535000e+02]), 1387  , 21  ),
        (28, 320, np.array([6.39106516e+05, 6.69788052e+06, 1.82416000e+02]), 1527.5, 20.5),
        (29, 330, np.array([6.39085345e+05, 6.69782694e+06, 1.82164000e+02]), 1226  , 22  ),
        (30, 60 , np.array([6.39124407e+05, 6.69781362e+06, 1.82277000e+02]), 1530.5, 20.5),
        (31, 20 , np.array([6.39118449e+05, 6.69784678e+06, 1.82334000e+02]), 1462  , 21  ),
        (32, 290, np.array([6.38980493e+05, 6.69766162e+06, 1.81773000e+02]), 573   , 28  ),
        (33, 240, np.array([6.38955067e+05, 6.69765390e+06, 1.81787000e+02]), 616.5 , 27.5),
        (34, 230, np.array([6.38917110e+05, 6.69764246e+06, 1.81723000e+02]), 770.5 , 26  ),
        (35, 340, np.array([6.38901511e+05, 6.69766562e+06, 1.81722000e+02]), 1024  , 24.5),
        (36, 170, np.array([6.38842551e+05, 6.69768422e+06, 1.81915000e+02]), 1182.5, 23  ),
        (37, 350, np.array([6.38881893e+05, 6.69770613e+06, 1.81971000e+02]), 1231  , 23  ),
        (38, 260, np.array([6.38828310e+05, 6.69773150e+06, 1.82165000e+02]), 1365  , 21.5),
        (39, 160, np.array([6.38798998e+05, 6.69767696e+06, 1.82180000e+02]), 1472  , 21  ),
        (40, 220, np.array([6.38828026e+05, 6.69764418e+06, 1.82034000e+02]), 1115.5, 24  ),
        (41, 120, np.array([6.38994603e+05, 6.69769938e+06, 1.81819000e+02]), 661.5 , 26.5),
        (42, 140, np.array([6.38973994e+05, 6.69773127e+06, 1.81940000e+02]), 802.5 , 25.5),
        (43, 130, np.array([6.38963888e+05, 6.69775682e+06, 1.82315000e+02]), 932   , 24.5),
        (44, 110, np.array([6.38907143e+05, 6.69775707e+06, 1.82406000e+02]), 1187  , 23  ),
        (45, 150, np.array([6.38934310e+05, 6.69776276e+06, 1.82306000e+02]), 1030  , 23.5),
        (46, 300, np.array([6.38947300e+05, 6.69779542e+06, 1.82257000e+02]), 1096  , 23.5),
        (47, 190, np.array([6.38957218e+05, 6.69768346e+06, 1.81905000e+02]), 721.5 , 26.5),
        (48, 100, np.array([6.38932724e+05, 6.69769106e+06, 1.81967000e+02]), 898   , 26  ),
        (49, 340, np.array([6.38924357e+05, 6.69772908e+06, 1.82312000e+02]), 1029  , 23.5),
        (50, 160, np.array([6.38865831e+05, 6.69778298e+06, 1.82415000e+02]), 1339.5, 23  ),
        (51, 240, np.array([6.38881847e+05, 6.69776009e+06, 1.82376000e+02]), 1138.5, 23.5),
        (52, 270, np.array([6.39169242e+05, 6.69769247e+06, 1.82180000e+02]), 1014,   23.5),
        (53, 340, np.array([6.39199806e+05, 6.69768286e+06, 1.82226000e+02]), 1014,   23.5),
        (54, 310, np.array([6.39223589e+05, 6.69770809e+06, 1.82158000e+02]), 1106,   23.5),
        (55, 90,  np.array([6.39216821e+05, 6.69765166e+06, 1.82178000e+02]), 1106,   23.5)
    ],
    np.dtype(
        [
            ('ma', int),
            ('rot', float),
            ('pos', np.ndarray),
            ('delay', float),
            ('att', float),
        ]
    )
)
# ============================================================= #


# ============================================================= #
# -------------------------- ma_pos --------------------------- #
# ============================================================= #
rot = np.radians(-90)
rotation = np.array(
    [
        [ np.cos(rot), np.sin(rot), 0],
        [-np.sin(rot), np.cos(rot), 0],
        [ 0,           0,           1]
    ]
)
ma_pos = np.dot(
    np.array([aa.tolist() for aa in ma_info['pos']]),
    rotation
)
# ============================================================= #

